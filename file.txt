1.
Сохраните несколько объектов модели "Экстренных служб", "Заявителя" и "Обращения" двумя способами (методом create уровня менеджера запросов objects и методом save уровня экземпляра модели)
1)
>>> Igor = Person(surname="Бакуллин", name="Игорь", patronymic="Николаевич", date="2002-12-11", phone="89056874525", health="Болею", gender="M")
>>> Igor.save()
>>> Ambulance = EmergencyService(name="Скорая помощь", code="03", phone="103")
>>> Ambulance.save()
>>> Covid = Incident(number="030", victims="2", call="True", status="STATUS_CHOICE_IN_WORK")
>>> Covid.save()
2)
create()
Aleksandra = Person.objects.create(surname="Винеева", name="Саша", patronymic="Петровна", date="1975-04-15", phone="89652586412", health="Здоровая", gender="W")
Fire_Assistance = EmergencyService.objects.create(name="Пожарная помощь", code="01", phone="101")
Fire = Incident.objects.create(number="011", victims="1", call="True", status="STATUS_CHOICE_IN_WORK")

2.
Создайте "Обращение" через менеджер запросов от объекта "Заявитель"
Igor.incidents.create(number="020", victims="0", call="True", status="STATUS_CHOICE_IN_WORK")
<Incident: 2022-08-31 14:05:00.757483+00:00-020-core.EmergencyService.None-Бакуллин-Игорь-Николаевич-2002-12-11-Болею>

3.
Добавьте "Обращению" несколько "экстренных служб" двумя способами (add, set)
Fire.service.add(Fire_Assistance)
list_services = [Fire_Assistance, Ambulance]
Covid.service.set(list_services)

1.
Получить объект заявителя с идентификатором в базе данных = 1 тремя способами.
1)  Person.objects.get(id=1)
    <Person: Бакуллин-Игорь-Николаевич-2002-12-11-89056874525-Болею-M>

2)   Person.objects.all()[0]
    <Person: Бакуллин-Игорь-Николаевич-2002-12-11-89056874525-Болею-M>

3)  Person.objects.all().first()
    <Person: Бакуллин-Игорь-Николаевич-2002-12-11-89056874525-Болею-M>

2.
Получить все обращения заявителя двумя способами
Incident.objects.filter(applicant=Igor)
<QuerySet [<Incident: 2022-08-24 12:15:00.488348+00:00-2-core.EmergencyService.None-Бакуллин-Игорь-Николаевич-2002-12-11-89056874525-Болею-M>]>
Igor.Incidents.all()
<QuerySet [<Incident: 2022-08-24 12:15:00.488348+00:00-2-core.EmergencyService.None-Бакуллин-Игорь-Николаевич-2002-12-11-89056874525-Болею-M>]>

3.
Получить первые три экстренные службы
EmergencyService.objects.all()[:3]
<QuerySet [<EmergencyService: Пожарная помощь-1-101>, <EmergencyService: Пожарная помощь-1-101>, <EmergencyService: Пожарная помощь-1-101>]>

4.
Получить последние пять заявителей
Person.objects.all().reverse()[:5]
<QuerySet [<Person: цупацйпа-цпацкп-цпацпцп-2020-12-12-Практически здоров>,
<Person: укпукп-укпукп-упукпк-1985-05-19-Практически здоров>,
<Person: н-н-н-2000-08-02-Практически здоров>,
<Person: л-л-л-2000-08-02-Практически здоров>,
<Person: керкер-кркр-кркрикрик-1985-05-01-Практически здоров>]>

5.
Получить самое старое и самое новое обращение двумя способами (latest, earliest, order_by)
Incident.objects.all().latest('data').first()
<Incident: 2022-08-17 07:26:25.442944+00:00-1673-help_1.EmergencyService.None>

Incident.objects.all().latest('-data').first()
<Incident: 2022-08-16 21:12:10.457141+00:00-1245-help_1.EmergencyService.None>

Incident.objects.all().earliest('data').first()
<Incident: 2022-08-16 21:12:10.457141+00:00-1245-help_1.EmergencyService.None>

Incident.objects.all().earliest('-data').first()
<Incident: 2022-08-17 07:26:25.442944+00:00-1673-help_1.EmergencyService.None>

Incident.objects.all().order_by('data').first()
<Incident: 2022-08-16 21:12:10.457141+00:00-1245-help_1.EmergencyService.None>, <Incident: 2022-08-16 21:20:15.005741+00:00-1674-help_1.EmergencyService.None>, <Incident: 2022-08-17 07:24:44.345725+00:00-1244-help_1.EmergencyService.None>, <Incident: 2022-08-17 07:26:25.442944+00:00-1673-help_1.EmergencyService.None>]>

Incident.objects.all().order_by('-data').first()
<Incident: 2022-08-17 07:26:25.442944+00:00-1673-help_1.EmergencyService.None>, <Incident: 2022-08-17 07:24:44.345725+00:00-1244-help_1.EmergencyService.None>, <Incident: 2022-08-16 21:20:15.005741+00:00-1674-help_1.EmergencyService.None>, <Incident: 2022-08-16 21:12:10.457141+00:00-1245-help_1.EmergencyService.None>]>

6.
Получить каждое второе обращение
Incident.objects.all()[::2]
[<Incident: 2022-08-16 21:12:10.457141+00:00-1245-help_1.EmergencyService.None>,
<Incident: 2022-08-17 07:24:44.345725+00:00-1244-help_1.EmergencyService.None>]

7.
Если дважды проитерироваться по полученному QuerySet'у, то сколько будет сделано обращений в БД?
С помощью конструкции len(connection.queries) можно проверить количество запросов в БД.
Для сброса следует использовать reset_queries() из django.db.
all_person = Person.objects.all()
for i in all_person:
     print(i)
len(connection.queries)
1

8.
Вывести общее число обращений
Incident.objects.count()


9.
Получить случайное обращение
Incident.objects.order_by('?').first()
<Incident: 2022-08-16 21:20:15.005741+00:00-1674-help_1.EmergencyService.None>

1.
Получить обращение с заявителем, идентификатор которого равен 1!
 models.Incident.objects.filter(applicant__id=1).first()

2.
Получить всех заявителей определенного пола и без обращений
Person.objects.filter(incidents=None, gender="M")
<QuerySet [<Person: qq-q-q-1985-05-16-Практически здоров>, <Person: qq-q-q-1985-05-16-Практически здоров>,
<Person: А-А-А-1985-05-17-Практически здоров>,
<Person: Генадев-Геннадий-Геннадьевич-1985-05-16-Практически здоров>,
<Person: Зелёный-Шрек-Шрекович-1955-05-26-Практически здоров>,
<Person: Ильич-Павел-Петрович-1985-05-16-Плохое самочувствие>,
<Person: Петров-Володя-Валерьевич-1985-05-20-Практически здоров>,
<Person: Петров-Павел-Олегович-1986-12-11-Практически здоров>,
<Person: Петров-Петр-Петрович-2000-08-02-Практически здоров>,
<Person: Рэм-Рустэм-Айназович-1999-07-25-Практически здоров>,
<Person: Сизов-Валера-Римович-1995-08-16-Здоров>,
<Person: Ф-Ф-Ф-1985-01-01-Практически здоров>,
<Person: Фамилия-Имя-Отчество-1985-05-16-Практически здоров>,
<Person: Фатвеев-Михаил-Олегович-1985-05-01-Практически здоров>,
<Person: Шаваев-Артур-Кириллович-1975-04-15-Здоров>,
<Person: а-а-а-1985-05-16-Практически здоров>,
<Person: аврвр-врвр-ыирватрвпр-1985-05-07-Практически здоров>,
<Person: в-в-в-2025-08-15-Практически здоров>,
<Person: й-й-й-1985-05-16-Практически здоров>,
<Person: йвуйа-уцацуа-цуац-1985-05-16-Практически здоров>]>


3.
Отсортировать всех заявителей по идентификатору
Person.objects.order_by('id')
<QuerySet [<Applicant: None-None-None-2002-12-11--Болею-M>, <Applicant: None-None-None-2000-12-11--Болею-W>, <Applicant: Лотух-Гора-Роп-2002-12-11-89587453684-Болею-M>, <Applicant: Зима-Лето-шщгбьто-2002-11-12-89587453684-не болею-M>, <Applicant: Лотух-Гора-Роп-2002-12-11-89587453684-Болею-M>, <Applicant: Зима-Мох-шщгбьто-2002-11-12-89587453684-не болею-M>, <Applicant: Лотух-Гора-Роп-2002-12-11-89587453684-Болею-M>]>

4.
Получить всех несовершеннолетних заявителей
Person.objects.filter(date__lte="2004-01-01")
<QuerySet [<Applicant: None-None-None-2002-12-11--Болею-M>, <Applicant: None-None-None-2000-12-11--Болею-W>, <Applicant: Зима-Лето-шщгбьто-2002-11-12-89587453684-не болею-M>, <Applicant: Зима-Мох-шщгбьто-2002-11-12-89587453684-не болею-M>, <Applicant: Лотух-Гора-Роп-2002-12-11-89587453684-Болею-M>, <Applicant: Лотух-Гора-Роп-2002-12-11-89587453684-Болею-M>, <Applicant: Лотух-Гора-Роп-2002-12-11-89587453684-Болею-M>]>

Person.objects.filter(date__year__lte=2004)
<QuerySet [<Applicant: None-None-None-2002-12-11--Болею-M>, <Applicant: None-None-None-2000-12-11--Болею-W>, <Applicant: Зима-Лето-шщгбьто-2002-11-12-89587453684-не болею-M>, <Applicant: Зима-Мох-шщгбьто-2002-11-12-89587453684-не болею-M>, <Applicant: Лотух-Гора-Роп-2002-12-11-89587453684-Болею-M>, <Applicant: Лотух-Гора-Роп-2002-12-11-89587453684-Болею-M>, <Applicant: Лотух-Гора-Роп-2002-12-11-89587453684-Болею-M>]>

5.Получить всех совершеннолетних заявителей
Applicant.objects.filter(date__year__gte=2004)
<QuerySet [<Applicant: None-None-None-2002-12-11--Болею-M>, <Applicant: None-None-None-2000-12-11--Болею-W>, <Applicant: Зима-Лето-шщгбьто-2002-11-12-89587453684-не болею-M>, <Applicant: Зима-Мох-шщгбьто-2002-11-12-89587453684-не болею-M>, <Applicant: Лотух-Гора-Роп-2002-12-11-89587453684-Болею-M>, <Applicant: Лотух-Гора-Роп-2002-12-11-89587453684-Болею-M>, <Applicant: Лотух-Гора-Роп-2002-12-11-89587453684-Болею-M>]>

6.Узнать есть ли вообще какие нибудь заявители
if models.Person.objects.exists():
     print("EST")

7.Узнать, есть ли какие нибудь заявители с похожими именами (пример: Алексей, Александра)
models.Person.objects.filter(name__icontains="Алекс")

Person.objects.filter(surname__startswith="Лот")
<QuerySet [<Applicant: Лотух-Гора-Роп-2002-12-11-89587453684-Болею-M>, <Applicant: Лотух-Гора-Роп-2002-12-11-89587453684-Болею-M>, <Applicant: Лотух-Гора-Роп-2002-12-11-89587453684-Болею-M>]>

8.
Получить все обращения, кроме тех, у которых не назначены службы
In [77]: Incident.objects.exclude(service=None)
Out[77]: <QuerySet [<Incident: 2022-08-18 10:12:53.444948+00:00-1-help_1.EmergencyService.None>, <Incident: 2022-08-18 20:29:05.582297+00:00-11-help_1.EmergencyService.None>, <Incident: 2022-08-19 06:16:23.637281+00:00-555-help_1.EmergencyService.None>, <Incident: 2022-08-19 08:31:17.491003+00:00-None-help_1.EmergencyService.None>, <Incident: 2022-08-19 11:02:44.555730+00:00-1245-help_1.EmergencyService.None>, <Incident: 2022-08-21 10:05:49.121832+00:00-0-help_1.EmergencyService.None>, <Incident: 2022-08-21 14:20:29.456911+00:00-2-help_1.EmergencyService.None>]>

9.
Среди обращений со службой с кодом "03" вывести дату самого первого обращения!
Incident.objects.filter(service__code="03").first().date
datetime.datetime(2022, 8, 24, 11, 54, 51, 455285, tzinfo=datetime.timezone.utc)

10.
Получить все обращения, которые созданы до определенной даты
Incident.objects.filter(date__lt='2022-08-12')

11.
Получить всех заявителей без изображения и/или без номера телефона
Person.objects.filter(phone=None, image='')
from django.db.models import Q
Person.objects.filter(Q(phone=None) | Q(image=''))
<QuerySet [<Person: Сизов-Валера-Римович-1995-08-16-None-Здоров-M>]>

12.
Получить всех заявителей, с определенным кодом оператора (917)
Person.objects.filter(phone__startswith="8917")
<QuerySet [<Applicant: Зима-Мох-шщгбьто-2002-11-12-89177453684-не болею-M>]>

13.
Получить результат объединения, пересечения и разницы предыдущих двух запросов.1
qs1 = models.Person.objects.filter(Q(phone=None) | Q(image=''))
qs2 = models.Person.objects.filter(phone__startswith="8917")
 qs1.union(qs2)

14.
Вывести все обращения, созданные в определенный период
Incident.objects.filter(date__range=('2022-08-28', '2022-08-31'))

15.
Получить количество заявителей без номера телефона
Person.objects.filter(phone=None).count()
1

16.
Выведите все уникальные записи модели заявитель
Person.objects.all().distinct()

17.
Получить все обращения, в описании которых есть какое то ключевое слово в любом регистре
In [106]: Incident.objects.filter(number__icontains='8')
Out[106]: <Incident: 2022-08-18 10:11:32.887460+00:00-789465-help_1.EmergencyService.None>

18.
Выбрать всех заявителей, при этом получить только значения поля "номер телефона"
In [112]: Person.objects.all().values('phone')
Out[112]: <QuerySet [{'phone': ''},
                     {'phone': ''},
                     {'phone': '89587453684'},
                     {'phone': '89587453684'},
                     {'phone': '89587453684'},
                     {'phone': '89587453684'},
                     {'phone': '89177453684'},
                     {'phone': '89587453684'},
                     {'phone': '89587453684'},
                     {'phone': '89587453684'},
                     {'phone': '87456985232'}]>

19 Выбрать всех заявителей, при этом получить все поля, кроме состояния здоровья
Person.objects.defer('health')

20.
Вывести все службы используя sql запрос
1)
    >>> for p in EmergencyService.objects.raw('SELECT * FROM core_emergencyservice'):
         print(p)
Скорая помощь-3-103-None
Пожарная помощь-1-101-None

21.
Выберите или создайте заявителя с номером "12341234"!
models.Person.objects.get_or_create(surname="Шаваев",
                                    name="Артур",
                                    patronymic="Кириллович",
                                    date="1975-04-15",
                                    phone="12341234",
                                    health="Здоров",
                                    gender='M')

22.
Измените номер заявителя с номером "12341234" на любой другой, если заявителя net, то запрос должен его создать.!
Person.objects.update_or_create(phone="12341234", defaults={'phone': 8999999999})
(<Person: Шаваев-Артур-Кириллович-1975-04-15-8999999999-Здоров-M>, False)

23.
Создайте сразу несколько заявителей.
Applicant.objects.bulk_create([Applicant(name="Dom", data="2012-12-12"), Applicant(name="MOY",data="2012-11-11"), Applicant(name="hyg", data="2012-10-10")])
[<Applicant: None-Dom-None-2012-12-12--Практически здоров-M>,
<Applicant: None-MOY-None-2012-11-11--Практически здоров-M>,
<Applicant: None-hyg-None-2012-10-10--Практически здоров-M>]

24.    bulk_UPDATE()
Измените несколько заявителей. Для поля "состояние здоровья" задайте значение "Полностью здоров"

objs = list(models.Person.objects.all()[:7])
for obj in objs:
     obj.health = 'Полностью здоров'
models.Person.objects.bulk_update(objs, ['health'])
7

25.
Выведите имя заявителя у какого-либо обращения. Убедитесь, что было сделано не более одного запроса.
    models.Incident.objects.all()[2].applicant.name
    'Игорь'
26.
Выведите список всех обращений с указанием списка задействованных экстренных служб в следующем формате:
"номер обращения: , список кодов служб:. Убедитесь, что было сделано не более двух запросов в БД.

    for incident in models.Incident.objects.all():
        print(f"Номер обращения:{incident.number} Список кодов служб:{[service.code for service in incident.service.all()]}")
Номер обращения:3 Список задействованных служб:[1, 3]
Номер обращения:1 Список задействованных служб:[1]
Номер обращения:2 Список задействованных служб:[]
Номер обращения:5 Список задействованных служб:[1584]
Номер обращения:0 Список задействованных служб:[]
Номер обращения:None Список задействованных служб:[1584]
Номер обращения:None Список задействованных служб:[1584]
Номер обращения:None Список задействованных служб:[1]
Номер обращения:30 Список задействованных служб:[1, 3]
Номер обращения:11 Список задействованных служб:[1]
Номер обращения:20 Список задействованных служб:[]
Номер обращения:None Список задействованных служб:[None]
Номер обращения:None Список задействованных служб:[None]

27.
Выведите все значения дат создания происшествий. Поместите даты в список.
  models.Incident.objects.values_list('date', flat=True)
    [datetime.datetime(2022, 8, 24, 11, 54, 51, 455000, tzinfo=datetime.timezone.utc),
    datetime.datetime(2022, 8, 24, 12, 0, 56, 88000, tzinfo=datetime.timezone.utc),
    datetime.datetime(2022, 8, 24, 12, 15, 0, 488000, tzinfo=datetime.timezone.utc),
    datetime.datetime(2022, 8, 25, 6, 26, 8, 494000, tzinfo=datetime.timezone.utc),
    datetime.datetime(2022, 8, 26, 6, 55, 32, 497000, tzinfo=datetime.timezone.utc),
    datetime.datetime(2022, 8, 30, 6, 16, 29, 318000, tzinfo=datetime.timezone.utc),
    datetime.datetime(2022, 8, 30, 10, 26, 5, 418000, tzinfo=datetime.timezone.utc),
    datetime.datetime(2022, 8, 31, 1, 29, 33, 331000, tzinfo=datetime.timezone.utc),
    datetime.datetime(2022, 8, 31, 14, 1, 53, 109000, tzinfo=datetime.timezone.utc),
    datetime.datetime(2022, 8, 31, 14, 4, 10, 876000, tzinfo=datetime.timezone.utc),
    datetime.datetime(2022, 8, 31, 14, 5, 0, 757000, tzinfo=datetime.timezone.utc),
    datetime.datetime(2022, 9, 2, 7, 29, 14, 558000, tzinfo=datetime.timezone.utc),
    datetime.datetime(2022, 9, 2, 7, 34, 1, 641000, tzinfo=datetime.timezone.utc)]>


28.
Создайте queryset, который будет всегда пустым.
1)
none_qs = Applicant.objects.none()
none_qs
<QuerySet []>

29.
Вывести среднее количество пострадавших в происшествиях
In [37]: Incident.objects.aggregate(Avg("victims"))
Out[37]: {'victims__avg': 3.357142857142857}

30.
Вывести общее кол-во пострадавших в проишествиях
In [34]: Incident.objects.aggregate(Sum("victims"))
Out[34]: {'victims__sum': 47}

31.
Вывести кол-во вызванных экс/служб для каждого проишествия
In [22]: apl_ann = Incident.objects.annotate(num=Count('service'))
In [23]: apl_ann.get(pk=1).num
Out[23]: 4

32.
Вывести среднее кол-во вызванных экс/служб
Incident.objects.annotate(Count('service')).aggregate(Avg('service__count'))
{'service__count__avg': 0.8}

33.
Вывести наибольше и наименьшее кол-во пострадавших
In [35]: Incident.objects.aggregate(Max("victims"))
Out[35]: {'victims__max': 12}
In [36]: Incident.objects.aggregate(Min("victims"))
Out[36]: {'victims__min': 1}

34.
Сформировать запрос к модели заявитель в котором будет добавлено поле с кол-вом обращений каждого завителя
q = models.Person.objects.annotate(Count('incidents'))
q[0].incidents__count
3

